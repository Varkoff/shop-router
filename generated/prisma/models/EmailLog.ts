
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EmailLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EmailLog
 * 
 */
export type EmailLogModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailLogPayload>

export type AggregateEmailLog = {
  _count: EmailLogCountAggregateOutputType | null
  _min: EmailLogMinAggregateOutputType | null
  _max: EmailLogMaxAggregateOutputType | null
}

export type EmailLogMinAggregateOutputType = {
  id: string | null
  to: string | null
  from: string | null
  subject: string | null
  body: string | null
  resendMessageId: string | null
  errorMessage: string | null
  sentAt: Date | null
  createdAt: Date | null
}

export type EmailLogMaxAggregateOutputType = {
  id: string | null
  to: string | null
  from: string | null
  subject: string | null
  body: string | null
  resendMessageId: string | null
  errorMessage: string | null
  sentAt: Date | null
  createdAt: Date | null
}

export type EmailLogCountAggregateOutputType = {
  id: number
  to: number
  from: number
  subject: number
  body: number
  resendMessageId: number
  errorMessage: number
  sentAt: number
  createdAt: number
  _all: number
}


export type EmailLogMinAggregateInputType = {
  id?: true
  to?: true
  from?: true
  subject?: true
  body?: true
  resendMessageId?: true
  errorMessage?: true
  sentAt?: true
  createdAt?: true
}

export type EmailLogMaxAggregateInputType = {
  id?: true
  to?: true
  from?: true
  subject?: true
  body?: true
  resendMessageId?: true
  errorMessage?: true
  sentAt?: true
  createdAt?: true
}

export type EmailLogCountAggregateInputType = {
  id?: true
  to?: true
  from?: true
  subject?: true
  body?: true
  resendMessageId?: true
  errorMessage?: true
  sentAt?: true
  createdAt?: true
  _all?: true
}

export type EmailLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailLog to aggregate.
   */
  where?: Prisma.EmailLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogOrderByWithRelationInput | Prisma.EmailLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmailLogs
  **/
  _count?: true | EmailLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailLogMaxAggregateInputType
}

export type GetEmailLogAggregateType<T extends EmailLogAggregateArgs> = {
      [P in keyof T & keyof AggregateEmailLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailLog[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailLog[P]>
}




export type EmailLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailLogWhereInput
  orderBy?: Prisma.EmailLogOrderByWithAggregationInput | Prisma.EmailLogOrderByWithAggregationInput[]
  by: Prisma.EmailLogScalarFieldEnum[] | Prisma.EmailLogScalarFieldEnum
  having?: Prisma.EmailLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailLogCountAggregateInputType | true
  _min?: EmailLogMinAggregateInputType
  _max?: EmailLogMaxAggregateInputType
}

export type EmailLogGroupByOutputType = {
  id: string
  to: string
  from: string | null
  subject: string | null
  body: string | null
  resendMessageId: string | null
  errorMessage: string | null
  sentAt: Date | null
  createdAt: Date
  _count: EmailLogCountAggregateOutputType | null
  _min: EmailLogMinAggregateOutputType | null
  _max: EmailLogMaxAggregateOutputType | null
}

type GetEmailLogGroupByPayload<T extends EmailLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailLogGroupByOutputType[P]>
      }
    >
  >



export type EmailLogWhereInput = {
  AND?: Prisma.EmailLogWhereInput | Prisma.EmailLogWhereInput[]
  OR?: Prisma.EmailLogWhereInput[]
  NOT?: Prisma.EmailLogWhereInput | Prisma.EmailLogWhereInput[]
  id?: Prisma.StringFilter<"EmailLog"> | string
  to?: Prisma.StringFilter<"EmailLog"> | string
  from?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  subject?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  body?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  resendMessageId?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  sentAt?: Prisma.DateTimeNullableFilter<"EmailLog"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailLog"> | Date | string
}

export type EmailLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  to?: Prisma.SortOrder
  from?: Prisma.SortOrderInput | Prisma.SortOrder
  subject?: Prisma.SortOrderInput | Prisma.SortOrder
  body?: Prisma.SortOrderInput | Prisma.SortOrder
  resendMessageId?: Prisma.SortOrderInput | Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  sentAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EmailLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmailLogWhereInput | Prisma.EmailLogWhereInput[]
  OR?: Prisma.EmailLogWhereInput[]
  NOT?: Prisma.EmailLogWhereInput | Prisma.EmailLogWhereInput[]
  to?: Prisma.StringFilter<"EmailLog"> | string
  from?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  subject?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  body?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  resendMessageId?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  errorMessage?: Prisma.StringNullableFilter<"EmailLog"> | string | null
  sentAt?: Prisma.DateTimeNullableFilter<"EmailLog"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailLog"> | Date | string
}, "id">

export type EmailLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  to?: Prisma.SortOrder
  from?: Prisma.SortOrderInput | Prisma.SortOrder
  subject?: Prisma.SortOrderInput | Prisma.SortOrder
  body?: Prisma.SortOrderInput | Prisma.SortOrder
  resendMessageId?: Prisma.SortOrderInput | Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  sentAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.EmailLogCountOrderByAggregateInput
  _max?: Prisma.EmailLogMaxOrderByAggregateInput
  _min?: Prisma.EmailLogMinOrderByAggregateInput
}

export type EmailLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailLogScalarWhereWithAggregatesInput | Prisma.EmailLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailLogScalarWhereWithAggregatesInput | Prisma.EmailLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EmailLog"> | string
  to?: Prisma.StringWithAggregatesFilter<"EmailLog"> | string
  from?: Prisma.StringNullableWithAggregatesFilter<"EmailLog"> | string | null
  subject?: Prisma.StringNullableWithAggregatesFilter<"EmailLog"> | string | null
  body?: Prisma.StringNullableWithAggregatesFilter<"EmailLog"> | string | null
  resendMessageId?: Prisma.StringNullableWithAggregatesFilter<"EmailLog"> | string | null
  errorMessage?: Prisma.StringNullableWithAggregatesFilter<"EmailLog"> | string | null
  sentAt?: Prisma.DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
}

export type EmailLogCreateInput = {
  id?: string
  to: string
  from?: string | null
  subject?: string | null
  body?: string | null
  resendMessageId?: string | null
  errorMessage?: string | null
  sentAt?: Date | string | null
  createdAt?: Date | string
}

export type EmailLogUncheckedCreateInput = {
  id?: string
  to: string
  from?: string | null
  subject?: string | null
  body?: string | null
  resendMessageId?: string | null
  errorMessage?: string | null
  sentAt?: Date | string | null
  createdAt?: Date | string
}

export type EmailLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  to?: Prisma.StringFieldUpdateOperationsInput | string
  from?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  body?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resendMessageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  to?: Prisma.StringFieldUpdateOperationsInput | string
  from?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  body?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resendMessageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailLogCreateManyInput = {
  id?: string
  to: string
  from?: string | null
  subject?: string | null
  body?: string | null
  resendMessageId?: string | null
  errorMessage?: string | null
  sentAt?: Date | string | null
  createdAt?: Date | string
}

export type EmailLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  to?: Prisma.StringFieldUpdateOperationsInput | string
  from?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  body?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resendMessageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  to?: Prisma.StringFieldUpdateOperationsInput | string
  from?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  body?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resendMessageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  to?: Prisma.SortOrder
  from?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  body?: Prisma.SortOrder
  resendMessageId?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EmailLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  to?: Prisma.SortOrder
  from?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  body?: Prisma.SortOrder
  resendMessageId?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EmailLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  to?: Prisma.SortOrder
  from?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  body?: Prisma.SortOrder
  resendMessageId?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type EmailLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  to?: boolean
  from?: boolean
  subject?: boolean
  body?: boolean
  resendMessageId?: boolean
  errorMessage?: boolean
  sentAt?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["emailLog"]>

export type EmailLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  to?: boolean
  from?: boolean
  subject?: boolean
  body?: boolean
  resendMessageId?: boolean
  errorMessage?: boolean
  sentAt?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["emailLog"]>

export type EmailLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  to?: boolean
  from?: boolean
  subject?: boolean
  body?: boolean
  resendMessageId?: boolean
  errorMessage?: boolean
  sentAt?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["emailLog"]>

export type EmailLogSelectScalar = {
  id?: boolean
  to?: boolean
  from?: boolean
  subject?: boolean
  body?: boolean
  resendMessageId?: boolean
  errorMessage?: boolean
  sentAt?: boolean
  createdAt?: boolean
}

export type EmailLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "to" | "from" | "subject" | "body" | "resendMessageId" | "errorMessage" | "sentAt" | "createdAt", ExtArgs["result"]["emailLog"]>

export type $EmailLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmailLog"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    to: string
    from: string | null
    subject: string | null
    body: string | null
    resendMessageId: string | null
    errorMessage: string | null
    sentAt: Date | null
    createdAt: Date
  }, ExtArgs["result"]["emailLog"]>
  composites: {}
}

export type EmailLogGetPayload<S extends boolean | null | undefined | EmailLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailLogPayload, S>

export type EmailLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: EmailLogCountAggregateInputType | true
  }

export interface EmailLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailLog'], meta: { name: 'EmailLog' } }
  /**
   * Find zero or one EmailLog that matches the filter.
   * @param {EmailLogFindUniqueArgs} args - Arguments to find a EmailLog
   * @example
   * // Get one EmailLog
   * const emailLog = await prisma.emailLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailLogFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmailLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailLogFindUniqueOrThrowArgs} args - Arguments to find a EmailLog
   * @example
   * // Get one EmailLog
   * const emailLog = await prisma.emailLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogFindFirstArgs} args - Arguments to find a EmailLog
   * @example
   * // Get one EmailLog
   * const emailLog = await prisma.emailLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailLogFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogFindFirstOrThrowArgs} args - Arguments to find a EmailLog
   * @example
   * // Get one EmailLog
   * const emailLog = await prisma.emailLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmailLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailLogs
   * const emailLogs = await prisma.emailLog.findMany()
   * 
   * // Get first 10 EmailLogs
   * const emailLogs = await prisma.emailLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emailLogWithIdOnly = await prisma.emailLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmailLogFindManyArgs>(args?: Prisma.SelectSubset<T, EmailLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmailLog.
   * @param {EmailLogCreateArgs} args - Arguments to create a EmailLog.
   * @example
   * // Create one EmailLog
   * const EmailLog = await prisma.emailLog.create({
   *   data: {
   *     // ... data to create a EmailLog
   *   }
   * })
   * 
   */
  create<T extends EmailLogCreateArgs>(args: Prisma.SelectSubset<T, EmailLogCreateArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmailLogs.
   * @param {EmailLogCreateManyArgs} args - Arguments to create many EmailLogs.
   * @example
   * // Create many EmailLogs
   * const emailLog = await prisma.emailLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailLogCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmailLogs and returns the data saved in the database.
   * @param {EmailLogCreateManyAndReturnArgs} args - Arguments to create many EmailLogs.
   * @example
   * // Create many EmailLogs
   * const emailLog = await prisma.emailLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmailLogs and only return the `id`
   * const emailLogWithIdOnly = await prisma.emailLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmailLog.
   * @param {EmailLogDeleteArgs} args - Arguments to delete one EmailLog.
   * @example
   * // Delete one EmailLog
   * const EmailLog = await prisma.emailLog.delete({
   *   where: {
   *     // ... filter to delete one EmailLog
   *   }
   * })
   * 
   */
  delete<T extends EmailLogDeleteArgs>(args: Prisma.SelectSubset<T, EmailLogDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmailLog.
   * @param {EmailLogUpdateArgs} args - Arguments to update one EmailLog.
   * @example
   * // Update one EmailLog
   * const emailLog = await prisma.emailLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailLogUpdateArgs>(args: Prisma.SelectSubset<T, EmailLogUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmailLogs.
   * @param {EmailLogDeleteManyArgs} args - Arguments to filter EmailLogs to delete.
   * @example
   * // Delete a few EmailLogs
   * const { count } = await prisma.emailLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailLogs
   * const emailLog = await prisma.emailLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailLogUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailLogs and returns the data updated in the database.
   * @param {EmailLogUpdateManyAndReturnArgs} args - Arguments to update many EmailLogs.
   * @example
   * // Update many EmailLogs
   * const emailLog = await prisma.emailLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmailLogs and only return the `id`
   * const emailLogWithIdOnly = await prisma.emailLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmailLog.
   * @param {EmailLogUpsertArgs} args - Arguments to update or create a EmailLog.
   * @example
   * // Update or create a EmailLog
   * const emailLog = await prisma.emailLog.upsert({
   *   create: {
   *     // ... data to create a EmailLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailLog we want to update
   *   }
   * })
   */
  upsert<T extends EmailLogUpsertArgs>(args: Prisma.SelectSubset<T, EmailLogUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailLogClient<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmailLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogCountArgs} args - Arguments to filter EmailLogs to count.
   * @example
   * // Count the number of EmailLogs
   * const count = await prisma.emailLog.count({
   *   where: {
   *     // ... the filter for the EmailLogs we want to count
   *   }
   * })
  **/
  count<T extends EmailLogCountArgs>(
    args?: Prisma.Subset<T, EmailLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmailLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailLogAggregateArgs>(args: Prisma.Subset<T, EmailLogAggregateArgs>): Prisma.PrismaPromise<GetEmailLogAggregateType<T>>

  /**
   * Group by EmailLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailLogGroupByArgs['orderBy'] }
      : { orderBy?: EmailLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmailLog model
 */
readonly fields: EmailLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmailLog model
 */
export interface EmailLogFieldRefs {
  readonly id: Prisma.FieldRef<"EmailLog", 'String'>
  readonly to: Prisma.FieldRef<"EmailLog", 'String'>
  readonly from: Prisma.FieldRef<"EmailLog", 'String'>
  readonly subject: Prisma.FieldRef<"EmailLog", 'String'>
  readonly body: Prisma.FieldRef<"EmailLog", 'String'>
  readonly resendMessageId: Prisma.FieldRef<"EmailLog", 'String'>
  readonly errorMessage: Prisma.FieldRef<"EmailLog", 'String'>
  readonly sentAt: Prisma.FieldRef<"EmailLog", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"EmailLog", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EmailLog findUnique
 */
export type EmailLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * Filter, which EmailLog to fetch.
   */
  where: Prisma.EmailLogWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog findUniqueOrThrow
 */
export type EmailLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * Filter, which EmailLog to fetch.
   */
  where: Prisma.EmailLogWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog findFirst
 */
export type EmailLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * Filter, which EmailLog to fetch.
   */
  where?: Prisma.EmailLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogOrderByWithRelationInput | Prisma.EmailLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailLogs.
   */
  cursor?: Prisma.EmailLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailLogs.
   */
  distinct?: Prisma.EmailLogScalarFieldEnum | Prisma.EmailLogScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog findFirstOrThrow
 */
export type EmailLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * Filter, which EmailLog to fetch.
   */
  where?: Prisma.EmailLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogOrderByWithRelationInput | Prisma.EmailLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailLogs.
   */
  cursor?: Prisma.EmailLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailLogs.
   */
  distinct?: Prisma.EmailLogScalarFieldEnum | Prisma.EmailLogScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog findMany
 */
export type EmailLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * Filter, which EmailLogs to fetch.
   */
  where?: Prisma.EmailLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogOrderByWithRelationInput | Prisma.EmailLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmailLogs.
   */
  cursor?: Prisma.EmailLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  distinct?: Prisma.EmailLogScalarFieldEnum | Prisma.EmailLogScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog create
 */
export type EmailLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * The data needed to create a EmailLog.
   */
  data: Prisma.XOR<Prisma.EmailLogCreateInput, Prisma.EmailLogUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog createMany
 */
export type EmailLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmailLogs.
   */
  data: Prisma.EmailLogCreateManyInput | Prisma.EmailLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailLog createManyAndReturn
 */
export type EmailLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * The data used to create many EmailLogs.
   */
  data: Prisma.EmailLogCreateManyInput | Prisma.EmailLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailLog update
 */
export type EmailLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * The data needed to update a EmailLog.
   */
  data: Prisma.XOR<Prisma.EmailLogUpdateInput, Prisma.EmailLogUncheckedUpdateInput>
  /**
   * Choose, which EmailLog to update.
   */
  where: Prisma.EmailLogWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog updateMany
 */
export type EmailLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmailLogs.
   */
  data: Prisma.XOR<Prisma.EmailLogUpdateManyMutationInput, Prisma.EmailLogUncheckedUpdateManyInput>
  /**
   * Filter which EmailLogs to update
   */
  where?: Prisma.EmailLogWhereInput
  /**
   * Limit how many EmailLogs to update.
   */
  limit?: number
}

/**
 * EmailLog updateManyAndReturn
 */
export type EmailLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * The data used to update EmailLogs.
   */
  data: Prisma.XOR<Prisma.EmailLogUpdateManyMutationInput, Prisma.EmailLogUncheckedUpdateManyInput>
  /**
   * Filter which EmailLogs to update
   */
  where?: Prisma.EmailLogWhereInput
  /**
   * Limit how many EmailLogs to update.
   */
  limit?: number
}

/**
 * EmailLog upsert
 */
export type EmailLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * The filter to search for the EmailLog to update in case it exists.
   */
  where: Prisma.EmailLogWhereUniqueInput
  /**
   * In case the EmailLog found by the `where` argument doesn't exist, create a new EmailLog with this data.
   */
  create: Prisma.XOR<Prisma.EmailLogCreateInput, Prisma.EmailLogUncheckedCreateInput>
  /**
   * In case the EmailLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailLogUpdateInput, Prisma.EmailLogUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog delete
 */
export type EmailLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * Filter which EmailLog to delete.
   */
  where: Prisma.EmailLogWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * EmailLog deleteMany
 */
export type EmailLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailLogs to delete
   */
  where?: Prisma.EmailLogWhereInput
  /**
   * Limit how many EmailLogs to delete.
   */
  limit?: number
}

/**
 * EmailLog without action
 */
export type EmailLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
}
