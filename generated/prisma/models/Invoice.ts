
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Invoice` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Invoice
 * 
 */
export type InvoiceModel = runtime.Types.Result.DefaultSelection<Prisma.$InvoicePayload>

export type AggregateInvoice = {
  _count: InvoiceCountAggregateOutputType | null
  _avg: InvoiceAvgAggregateOutputType | null
  _sum: InvoiceSumAggregateOutputType | null
  _min: InvoiceMinAggregateOutputType | null
  _max: InvoiceMaxAggregateOutputType | null
}

export type InvoiceAvgAggregateOutputType = {
  amountCents: number | null
}

export type InvoiceSumAggregateOutputType = {
  amountCents: number | null
}

export type InvoiceMinAggregateOutputType = {
  id: string | null
  orderId: string | null
  stripeInvoiceId: string | null
  amountCents: number | null
  paidAt: Date | null
  createdAt: Date | null
}

export type InvoiceMaxAggregateOutputType = {
  id: string | null
  orderId: string | null
  stripeInvoiceId: string | null
  amountCents: number | null
  paidAt: Date | null
  createdAt: Date | null
}

export type InvoiceCountAggregateOutputType = {
  id: number
  orderId: number
  stripeInvoiceId: number
  amountCents: number
  paidAt: number
  createdAt: number
  _all: number
}


export type InvoiceAvgAggregateInputType = {
  amountCents?: true
}

export type InvoiceSumAggregateInputType = {
  amountCents?: true
}

export type InvoiceMinAggregateInputType = {
  id?: true
  orderId?: true
  stripeInvoiceId?: true
  amountCents?: true
  paidAt?: true
  createdAt?: true
}

export type InvoiceMaxAggregateInputType = {
  id?: true
  orderId?: true
  stripeInvoiceId?: true
  amountCents?: true
  paidAt?: true
  createdAt?: true
}

export type InvoiceCountAggregateInputType = {
  id?: true
  orderId?: true
  stripeInvoiceId?: true
  amountCents?: true
  paidAt?: true
  createdAt?: true
  _all?: true
}

export type InvoiceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Invoice to aggregate.
   */
  where?: Prisma.InvoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invoices to fetch.
   */
  orderBy?: Prisma.InvoiceOrderByWithRelationInput | Prisma.InvoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InvoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invoices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Invoices
  **/
  _count?: true | InvoiceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: InvoiceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: InvoiceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InvoiceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InvoiceMaxAggregateInputType
}

export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
      [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInvoice[P]>
    : Prisma.GetScalarType<T[P], AggregateInvoice[P]>
}




export type InvoiceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InvoiceWhereInput
  orderBy?: Prisma.InvoiceOrderByWithAggregationInput | Prisma.InvoiceOrderByWithAggregationInput[]
  by: Prisma.InvoiceScalarFieldEnum[] | Prisma.InvoiceScalarFieldEnum
  having?: Prisma.InvoiceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InvoiceCountAggregateInputType | true
  _avg?: InvoiceAvgAggregateInputType
  _sum?: InvoiceSumAggregateInputType
  _min?: InvoiceMinAggregateInputType
  _max?: InvoiceMaxAggregateInputType
}

export type InvoiceGroupByOutputType = {
  id: string
  orderId: string
  stripeInvoiceId: string
  amountCents: number
  paidAt: Date | null
  createdAt: Date
  _count: InvoiceCountAggregateOutputType | null
  _avg: InvoiceAvgAggregateOutputType | null
  _sum: InvoiceSumAggregateOutputType | null
  _min: InvoiceMinAggregateOutputType | null
  _max: InvoiceMaxAggregateOutputType | null
}

type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InvoiceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InvoiceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InvoiceGroupByOutputType[P]>
      }
    >
  >



export type InvoiceWhereInput = {
  AND?: Prisma.InvoiceWhereInput | Prisma.InvoiceWhereInput[]
  OR?: Prisma.InvoiceWhereInput[]
  NOT?: Prisma.InvoiceWhereInput | Prisma.InvoiceWhereInput[]
  id?: Prisma.StringFilter<"Invoice"> | string
  orderId?: Prisma.StringFilter<"Invoice"> | string
  stripeInvoiceId?: Prisma.StringFilter<"Invoice"> | string
  amountCents?: Prisma.IntFilter<"Invoice"> | number
  paidAt?: Prisma.DateTimeNullableFilter<"Invoice"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Invoice"> | Date | string
  order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
}

export type InvoiceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  stripeInvoiceId?: Prisma.SortOrder
  amountCents?: Prisma.SortOrder
  paidAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  order?: Prisma.OrderOrderByWithRelationInput
}

export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  orderId?: string
  stripeInvoiceId?: string
  AND?: Prisma.InvoiceWhereInput | Prisma.InvoiceWhereInput[]
  OR?: Prisma.InvoiceWhereInput[]
  NOT?: Prisma.InvoiceWhereInput | Prisma.InvoiceWhereInput[]
  amountCents?: Prisma.IntFilter<"Invoice"> | number
  paidAt?: Prisma.DateTimeNullableFilter<"Invoice"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Invoice"> | Date | string
  order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
}, "id" | "orderId" | "stripeInvoiceId">

export type InvoiceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  stripeInvoiceId?: Prisma.SortOrder
  amountCents?: Prisma.SortOrder
  paidAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.InvoiceCountOrderByAggregateInput
  _avg?: Prisma.InvoiceAvgOrderByAggregateInput
  _max?: Prisma.InvoiceMaxOrderByAggregateInput
  _min?: Prisma.InvoiceMinOrderByAggregateInput
  _sum?: Prisma.InvoiceSumOrderByAggregateInput
}

export type InvoiceScalarWhereWithAggregatesInput = {
  AND?: Prisma.InvoiceScalarWhereWithAggregatesInput | Prisma.InvoiceScalarWhereWithAggregatesInput[]
  OR?: Prisma.InvoiceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InvoiceScalarWhereWithAggregatesInput | Prisma.InvoiceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Invoice"> | string
  orderId?: Prisma.StringWithAggregatesFilter<"Invoice"> | string
  stripeInvoiceId?: Prisma.StringWithAggregatesFilter<"Invoice"> | string
  amountCents?: Prisma.IntWithAggregatesFilter<"Invoice"> | number
  paidAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Invoice"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Invoice"> | Date | string
}

export type InvoiceCreateInput = {
  id?: string
  stripeInvoiceId: string
  amountCents: number
  paidAt?: Date | string | null
  createdAt?: Date | string
  order: Prisma.OrderCreateNestedOneWithoutInvoiceInput
}

export type InvoiceUncheckedCreateInput = {
  id?: string
  orderId: string
  stripeInvoiceId: string
  amountCents: number
  paidAt?: Date | string | null
  createdAt?: Date | string
}

export type InvoiceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stripeInvoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amountCents?: Prisma.IntFieldUpdateOperationsInput | number
  paidAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  order?: Prisma.OrderUpdateOneRequiredWithoutInvoiceNestedInput
}

export type InvoiceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  stripeInvoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amountCents?: Prisma.IntFieldUpdateOperationsInput | number
  paidAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvoiceCreateManyInput = {
  id?: string
  orderId: string
  stripeInvoiceId: string
  amountCents: number
  paidAt?: Date | string | null
  createdAt?: Date | string
}

export type InvoiceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stripeInvoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amountCents?: Prisma.IntFieldUpdateOperationsInput | number
  paidAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvoiceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.StringFieldUpdateOperationsInput | string
  stripeInvoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amountCents?: Prisma.IntFieldUpdateOperationsInput | number
  paidAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvoiceNullableScalarRelationFilter = {
  is?: Prisma.InvoiceWhereInput | null
  isNot?: Prisma.InvoiceWhereInput | null
}

export type InvoiceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  stripeInvoiceId?: Prisma.SortOrder
  amountCents?: Prisma.SortOrder
  paidAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type InvoiceAvgOrderByAggregateInput = {
  amountCents?: Prisma.SortOrder
}

export type InvoiceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  stripeInvoiceId?: Prisma.SortOrder
  amountCents?: Prisma.SortOrder
  paidAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type InvoiceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  stripeInvoiceId?: Prisma.SortOrder
  amountCents?: Prisma.SortOrder
  paidAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type InvoiceSumOrderByAggregateInput = {
  amountCents?: Prisma.SortOrder
}

export type InvoiceCreateNestedOneWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.InvoiceCreateWithoutOrderInput, Prisma.InvoiceUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.InvoiceCreateOrConnectWithoutOrderInput
  connect?: Prisma.InvoiceWhereUniqueInput
}

export type InvoiceUncheckedCreateNestedOneWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.InvoiceCreateWithoutOrderInput, Prisma.InvoiceUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.InvoiceCreateOrConnectWithoutOrderInput
  connect?: Prisma.InvoiceWhereUniqueInput
}

export type InvoiceUpdateOneWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.InvoiceCreateWithoutOrderInput, Prisma.InvoiceUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.InvoiceCreateOrConnectWithoutOrderInput
  upsert?: Prisma.InvoiceUpsertWithoutOrderInput
  disconnect?: Prisma.InvoiceWhereInput | boolean
  delete?: Prisma.InvoiceWhereInput | boolean
  connect?: Prisma.InvoiceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InvoiceUpdateToOneWithWhereWithoutOrderInput, Prisma.InvoiceUpdateWithoutOrderInput>, Prisma.InvoiceUncheckedUpdateWithoutOrderInput>
}

export type InvoiceUncheckedUpdateOneWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.InvoiceCreateWithoutOrderInput, Prisma.InvoiceUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.InvoiceCreateOrConnectWithoutOrderInput
  upsert?: Prisma.InvoiceUpsertWithoutOrderInput
  disconnect?: Prisma.InvoiceWhereInput | boolean
  delete?: Prisma.InvoiceWhereInput | boolean
  connect?: Prisma.InvoiceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InvoiceUpdateToOneWithWhereWithoutOrderInput, Prisma.InvoiceUpdateWithoutOrderInput>, Prisma.InvoiceUncheckedUpdateWithoutOrderInput>
}

export type InvoiceCreateWithoutOrderInput = {
  id?: string
  stripeInvoiceId: string
  amountCents: number
  paidAt?: Date | string | null
  createdAt?: Date | string
}

export type InvoiceUncheckedCreateWithoutOrderInput = {
  id?: string
  stripeInvoiceId: string
  amountCents: number
  paidAt?: Date | string | null
  createdAt?: Date | string
}

export type InvoiceCreateOrConnectWithoutOrderInput = {
  where: Prisma.InvoiceWhereUniqueInput
  create: Prisma.XOR<Prisma.InvoiceCreateWithoutOrderInput, Prisma.InvoiceUncheckedCreateWithoutOrderInput>
}

export type InvoiceUpsertWithoutOrderInput = {
  update: Prisma.XOR<Prisma.InvoiceUpdateWithoutOrderInput, Prisma.InvoiceUncheckedUpdateWithoutOrderInput>
  create: Prisma.XOR<Prisma.InvoiceCreateWithoutOrderInput, Prisma.InvoiceUncheckedCreateWithoutOrderInput>
  where?: Prisma.InvoiceWhereInput
}

export type InvoiceUpdateToOneWithWhereWithoutOrderInput = {
  where?: Prisma.InvoiceWhereInput
  data: Prisma.XOR<Prisma.InvoiceUpdateWithoutOrderInput, Prisma.InvoiceUncheckedUpdateWithoutOrderInput>
}

export type InvoiceUpdateWithoutOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stripeInvoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amountCents?: Prisma.IntFieldUpdateOperationsInput | number
  paidAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvoiceUncheckedUpdateWithoutOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stripeInvoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amountCents?: Prisma.IntFieldUpdateOperationsInput | number
  paidAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InvoiceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  stripeInvoiceId?: boolean
  amountCents?: boolean
  paidAt?: boolean
  createdAt?: boolean
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["invoice"]>

export type InvoiceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  stripeInvoiceId?: boolean
  amountCents?: boolean
  paidAt?: boolean
  createdAt?: boolean
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["invoice"]>

export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  stripeInvoiceId?: boolean
  amountCents?: boolean
  paidAt?: boolean
  createdAt?: boolean
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["invoice"]>

export type InvoiceSelectScalar = {
  id?: boolean
  orderId?: boolean
  stripeInvoiceId?: boolean
  amountCents?: boolean
  paidAt?: boolean
  createdAt?: boolean
}

export type InvoiceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orderId" | "stripeInvoiceId" | "amountCents" | "paidAt" | "createdAt", ExtArgs["result"]["invoice"]>
export type InvoiceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}
export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}
export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
}

export type $InvoicePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Invoice"
  objects: {
    order: Prisma.$OrderPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    orderId: string
    stripeInvoiceId: string
    amountCents: number
    paidAt: Date | null
    createdAt: Date
  }, ExtArgs["result"]["invoice"]>
  composites: {}
}

export type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InvoicePayload, S>

export type InvoiceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: InvoiceCountAggregateInputType | true
  }

export interface InvoiceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
  /**
   * Find zero or one Invoice that matches the filter.
   * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
   * @example
   * // Get one Invoice
   * const invoice = await prisma.invoice.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InvoiceFindUniqueArgs>(args: Prisma.SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
   * @example
   * // Get one Invoice
   * const invoice = await prisma.invoice.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Invoice that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
   * @example
   * // Get one Invoice
   * const invoice = await prisma.invoice.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InvoiceFindFirstArgs>(args?: Prisma.SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Invoice that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
   * @example
   * // Get one Invoice
   * const invoice = await prisma.invoice.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Invoices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Invoices
   * const invoices = await prisma.invoice.findMany()
   * 
   * // Get first 10 Invoices
   * const invoices = await prisma.invoice.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InvoiceFindManyArgs>(args?: Prisma.SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Invoice.
   * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
   * @example
   * // Create one Invoice
   * const Invoice = await prisma.invoice.create({
   *   data: {
   *     // ... data to create a Invoice
   *   }
   * })
   * 
   */
  create<T extends InvoiceCreateArgs>(args: Prisma.SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Invoices.
   * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
   * @example
   * // Create many Invoices
   * const invoice = await prisma.invoice.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InvoiceCreateManyArgs>(args?: Prisma.SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Invoices and returns the data saved in the database.
   * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
   * @example
   * // Create many Invoices
   * const invoice = await prisma.invoice.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Invoices and only return the `id`
   * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Invoice.
   * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
   * @example
   * // Delete one Invoice
   * const Invoice = await prisma.invoice.delete({
   *   where: {
   *     // ... filter to delete one Invoice
   *   }
   * })
   * 
   */
  delete<T extends InvoiceDeleteArgs>(args: Prisma.SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Invoice.
   * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
   * @example
   * // Update one Invoice
   * const invoice = await prisma.invoice.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InvoiceUpdateArgs>(args: Prisma.SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Invoices.
   * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
   * @example
   * // Delete a few Invoices
   * const { count } = await prisma.invoice.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InvoiceDeleteManyArgs>(args?: Prisma.SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Invoices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Invoices
   * const invoice = await prisma.invoice.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InvoiceUpdateManyArgs>(args: Prisma.SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Invoices and returns the data updated in the database.
   * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
   * @example
   * // Update many Invoices
   * const invoice = await prisma.invoice.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Invoices and only return the `id`
   * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Invoice.
   * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
   * @example
   * // Update or create a Invoice
   * const invoice = await prisma.invoice.upsert({
   *   create: {
   *     // ... data to create a Invoice
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Invoice we want to update
   *   }
   * })
   */
  upsert<T extends InvoiceUpsertArgs>(args: Prisma.SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma.Prisma__InvoiceClient<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Invoices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
   * @example
   * // Count the number of Invoices
   * const count = await prisma.invoice.count({
   *   where: {
   *     // ... the filter for the Invoices we want to count
   *   }
   * })
  **/
  count<T extends InvoiceCountArgs>(
    args?: Prisma.Subset<T, InvoiceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InvoiceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Invoice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InvoiceAggregateArgs>(args: Prisma.Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

  /**
   * Group by Invoice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvoiceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InvoiceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InvoiceGroupByArgs['orderBy'] }
      : { orderBy?: InvoiceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Invoice model
 */
readonly fields: InvoiceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Invoice.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  order<T extends Prisma.OrderDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrderDefaultArgs<ExtArgs>>): Prisma.Prisma__OrderClient<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Invoice model
 */
export interface InvoiceFieldRefs {
  readonly id: Prisma.FieldRef<"Invoice", 'String'>
  readonly orderId: Prisma.FieldRef<"Invoice", 'String'>
  readonly stripeInvoiceId: Prisma.FieldRef<"Invoice", 'String'>
  readonly amountCents: Prisma.FieldRef<"Invoice", 'Int'>
  readonly paidAt: Prisma.FieldRef<"Invoice", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Invoice", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Invoice findUnique
 */
export type InvoiceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * Filter, which Invoice to fetch.
   */
  where: Prisma.InvoiceWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice findUniqueOrThrow
 */
export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * Filter, which Invoice to fetch.
   */
  where: Prisma.InvoiceWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice findFirst
 */
export type InvoiceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * Filter, which Invoice to fetch.
   */
  where?: Prisma.InvoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invoices to fetch.
   */
  orderBy?: Prisma.InvoiceOrderByWithRelationInput | Prisma.InvoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Invoices.
   */
  cursor?: Prisma.InvoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invoices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Invoices.
   */
  distinct?: Prisma.InvoiceScalarFieldEnum | Prisma.InvoiceScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice findFirstOrThrow
 */
export type InvoiceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * Filter, which Invoice to fetch.
   */
  where?: Prisma.InvoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invoices to fetch.
   */
  orderBy?: Prisma.InvoiceOrderByWithRelationInput | Prisma.InvoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Invoices.
   */
  cursor?: Prisma.InvoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invoices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Invoices.
   */
  distinct?: Prisma.InvoiceScalarFieldEnum | Prisma.InvoiceScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice findMany
 */
export type InvoiceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * Filter, which Invoices to fetch.
   */
  where?: Prisma.InvoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invoices to fetch.
   */
  orderBy?: Prisma.InvoiceOrderByWithRelationInput | Prisma.InvoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Invoices.
   */
  cursor?: Prisma.InvoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invoices.
   */
  skip?: number
  distinct?: Prisma.InvoiceScalarFieldEnum | Prisma.InvoiceScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice create
 */
export type InvoiceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * The data needed to create a Invoice.
   */
  data: Prisma.XOR<Prisma.InvoiceCreateInput, Prisma.InvoiceUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice createMany
 */
export type InvoiceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Invoices.
   */
  data: Prisma.InvoiceCreateManyInput | Prisma.InvoiceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Invoice createManyAndReturn
 */
export type InvoiceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * The data used to create many Invoices.
   */
  data: Prisma.InvoiceCreateManyInput | Prisma.InvoiceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Invoice update
 */
export type InvoiceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * The data needed to update a Invoice.
   */
  data: Prisma.XOR<Prisma.InvoiceUpdateInput, Prisma.InvoiceUncheckedUpdateInput>
  /**
   * Choose, which Invoice to update.
   */
  where: Prisma.InvoiceWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice updateMany
 */
export type InvoiceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Invoices.
   */
  data: Prisma.XOR<Prisma.InvoiceUpdateManyMutationInput, Prisma.InvoiceUncheckedUpdateManyInput>
  /**
   * Filter which Invoices to update
   */
  where?: Prisma.InvoiceWhereInput
  /**
   * Limit how many Invoices to update.
   */
  limit?: number
}

/**
 * Invoice updateManyAndReturn
 */
export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * The data used to update Invoices.
   */
  data: Prisma.XOR<Prisma.InvoiceUpdateManyMutationInput, Prisma.InvoiceUncheckedUpdateManyInput>
  /**
   * Filter which Invoices to update
   */
  where?: Prisma.InvoiceWhereInput
  /**
   * Limit how many Invoices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Invoice upsert
 */
export type InvoiceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * The filter to search for the Invoice to update in case it exists.
   */
  where: Prisma.InvoiceWhereUniqueInput
  /**
   * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
   */
  create: Prisma.XOR<Prisma.InvoiceCreateInput, Prisma.InvoiceUncheckedCreateInput>
  /**
   * In case the Invoice was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InvoiceUpdateInput, Prisma.InvoiceUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice delete
 */
export type InvoiceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  /**
   * Filter which Invoice to delete.
   */
  where: Prisma.InvoiceWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Invoice deleteMany
 */
export type InvoiceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Invoices to delete
   */
  where?: Prisma.InvoiceWhereInput
  /**
   * Limit how many Invoices to delete.
   */
  limit?: number
}

/**
 * Invoice without action
 */
export type InvoiceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
}
