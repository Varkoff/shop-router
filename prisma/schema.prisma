// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "relationJoins", "driverAdapters"]
  moduleFormat    = "esm"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// E-commerce (SaaS non multi-tenant)
// - Produits, Catégories, Images
// - Panier (guest + user)
// - Commandes (guest possible)
// - Gestion du stock
// - Envoi d'emails via Resend (EmailLog pour historique)
// - Facturation via Stripe (produits/prices/invoices stockés par id)

/// Enums

enum OrderStatus {
  DRAFT
  PENDING
  PAID
  FULFILLED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
}

/// Models

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String? // nullable if OAuth-only or invited-only
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart          Cart?
  orders        Order[]
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
}

model Product {
  id              String     @id @default(uuid())
  name            String
  slug            String     @unique
  description     String?
  content         String?
  currency        String     @default("EUR")
  // Price is stored to render UI; Stripe price is authoritative for billing
  priceCents      Int        @default(0)
  stock           Int        @default(0)
  isActive        Boolean    @default(true)
  stripeProductId String?    @unique
  stripePriceId   String?    @unique
  images          Image[]
  categories      Category[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  CartItem        CartItem[]

  @@index([slug])
}

model Image {
  id        String    @id @default(uuid())
  url       String
  alt       String?
  product   Product[]
  createdAt DateTime  @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id             String   @id @default(uuid())
  cart           Cart     @relation(fields: [cartId], references: [id])
  cartId         String
  product        Product  @relation(fields: [productId], references: [id])
  productId      String
  quantity       Int      @default(1)
  unitPriceCents Int
  createdAt      DateTime @default(now())

  @@unique([cartId, productId])
}

model Order {
  id              String  @id @default(uuid())
  // Optional user; guest checkout uses emailOnly and guestEmail
  user            User?   @relation(fields: [userId], references: [id])
  userId          String?
  guestEmail      String?
  shippingAddress Json?
  billingAddress  Json?

  items OrderItem[]

  subtotalCents Int
  taxCents      Int @default(0)
  shippingCents Int @default(0)
  totalCents    Int

  orderStatus    OrderStatus    @default(PENDING)
  paymentStatus  PaymentStatus  @default(PENDING)
  deliveryStatus DeliveryStatus @default(PENDING)

  // Stripe fields
  stripePaymentIntentId String?
  stripeInvoiceId       String?
  stripeCheckoutSession String?

  // Business fields
  currency String @default("EUR")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice?

  @@index([guestEmail])
}

model OrderItem {
  id              String  @id @default(uuid())
  order           Order   @relation(fields: [orderId], references: [id])
  orderId         String
  productId       String?
  productName     String
  quantity        Int     @default(1)
  unitPriceCents  Int
  totalPriceCents Int
  stripePriceId   String?
}

model Invoice {
  id              String    @id @default(uuid())
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String    @unique
  stripeInvoiceId String    @unique
  amountCents     Int
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
}

model EmailLog {
  id              String    @id @default(uuid())
  to              String
  from            String?
  subject         String?
  body            String? // store plain/text or minimal HTML
  resendMessageId String? // id returned by Resend for tracing
  errorMessage    String?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
}

/// Notes:
// - Products have `stripeProductId` and `stripePriceId` so they can be created/linked to Stripe automatically.
// - Orders store Stripe identifiers (payment intent / invoice) for reconciliation.
// - Guest checkout is supported via `guestEmail` on `Order` and `sessionId` on `Cart`.
// - Addresses are stored as `Json` to keep schema flexible (street, city, zip, country, etc.).

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
